---
import "../styles/global.css";
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

export interface Props {
  title?: string;
}

const { title = "KEMEKO - 一場有溫度的未來對話" } = Astro.props;
---

<!DOCTYPE html>
<html lang="zh-TW">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/svg+xml" href="favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
        <base href={import.meta.env.BASE_URL}> <!-- 添加 base 標籤 -->
            <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=DM+Serif+Text:ital@0;1&family=LXGW+WenKai+TC&family=Noto+Sans+TC:wght@100..900&family=Noto+Serif+TC:wght@200..900&display=swap" rel="stylesheet">
        
        <!-- Locomotive Scroll CSS -->
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/locomotive-scroll@4.1.4/dist/locomotive-scroll.min.css">
    </head>
<body>
    <Header />
    
    <div data-scroll-container>
        <slot />

        <Footer />
        
        <!-- Locomotive Scroll JavaScript -->
        <script src="https://cdn.jsdelivr.net/npm/locomotive-scroll@4.1.4/dist/locomotive-scroll.min.js"></script>
        
        <script>
        // 初始化 Locomotive Scroll
        function initializeLocomotiveScroll() {
            const scrollContainer = document.querySelector('[data-scroll-container]');
            if (!scrollContainer) return;

            // 初始化 Locomotive Scroll（性能優化版本）
            const scroll = new LocomotiveScroll({
                el: scrollContainer,
                smooth: true,
                lerp: 0.08, // 稍微降低 lerp 值以減少計算
                multiplier: 1.0,
                smartphone: {
                    smooth: false, // 在手機上禁用平滑滾動以提升性能
                    breakpoint: 767
                },
                tablet: {
                    smooth: true,
                    breakpoint: 1024
                },
                // 性能優化選項
                reloadOnContextChange: false,
                resetNativeScroll: true
            });

            // 將 scroll 實例掛載到 window 供其他腳本使用
            window.scroll = scroll;

            // 頁面 resize 時更新 scroll
            window.addEventListener('resize', () => {
                scroll.update();
            });

            // 頁面載入完成後更新 scroll
            window.addEventListener('load', () => {
                scroll.update();
            });

            // 監聽 Locomotive Scroll 的滾動事件並觸發自定義事件（節流版本）
            let lastEventTime = 0;
            const throttleDelay = 16; // 約 60fps
            
            scroll.on('scroll', (instance) => {
                const now = Date.now();
                if (now - lastEventTime < throttleDelay) return;
                lastEventTime = now;
                
                // 觸發自定義事件，讓 header 可以監聽
                const customEvent = new CustomEvent('locomotiveScroll', {
                    detail: {
                        scroll: instance.scroll,
                        limit: instance.limit,
                        direction: instance.direction
                    }
                });
                window.dispatchEvent(customEvent);
            });

            // Locomotive Scroll 初始化完成
        }

        // 確保所有內容都可見 - 修復動畫問題（性能優化版本）
        function initializeAnimations() {
            // 批量處理 DOM 更新以提升性能
            const elementsToUpdate = [
                { selector: '.fade-in', action: 'addClass', className: 'visible' },
                { selector: '.hero-content', action: 'setOpacity', value: '1' },
                { selector: '.content-item', action: 'addClass', className: 'active', firstOnly: true }
            ];

            elementsToUpdate.forEach(({ selector, action, className, value, firstOnly }) => {
                const elements = firstOnly ? 
                    [document.querySelector(selector)] : 
                    Array.from(document.querySelectorAll(selector));
                
                elements.forEach(element => {
                    if (!element) return;
                    
                    switch (action) {
                        case 'addClass':
                            element.classList.add(className);
                            break;
                        case 'setOpacity':
                            (element as HTMLElement).style.opacity = value;
                            break;
                    }
                });
            });
        }

        // 立即執行動畫初始化
        initializeAnimations();
        
        // DOM 載入完成後執行
        document.addEventListener('DOMContentLoaded', function() {
            initializeAnimations();
            initializeLocomotiveScroll();
        });
        </script>
    </body>
</html>