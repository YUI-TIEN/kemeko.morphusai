---
import "../styles/global.css";
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Preloader from '../components/Preloader.astro';

export interface Props {
  title?: string;
}

const { title = "KEMEKO - 一場有溫度的未來對話" } = Astro.props;
---

<!DOCTYPE html>
<html lang="zh-TW">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/svg+xml" href="favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
        <base href={import.meta.env.BASE_URL}>
        
        <!-- Content Security Policy - Development friendly -->
        <meta http-equiv="Content-Security-Policy" content="default-src 'self' 'unsafe-inline' 'unsafe-eval' data: https: blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:; font-src 'self' https:; img-src 'self' data: https: blob:; connect-src 'self' https: wss:; frame-src 'self' https:; media-src 'self' https: blob:;">
        
        <!-- Security Headers (Note: X-Frame-Options cannot be set via meta tag) -->
        <meta http-equiv="X-Content-Type-Options" content="nosniff">
        <meta http-equiv="X-XSS-Protection" content="1; mode=block">
        <meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin">
        
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=DM+Serif+Text:ital@0;1&family=LXGW+WenKai+TC&family=Noto+Sans+TC:wght@100..900&family=Noto+Serif+TC:wght@200..900&display=swap" rel="stylesheet">
        
        <!-- Locomotive Scroll CSS -->
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/locomotive-scroll@4.1.4/dist/locomotive-scroll.min.css">
    </head>
<body>
    <Preloader />
    <Header />
    
    <div data-scroll-container>
        <slot />

        <Footer />
        
        <!-- Locomotive Scroll JavaScript -->
        <script src="https://cdn.jsdelivr.net/npm/locomotive-scroll@4.1.4/dist/locomotive-scroll.min.js"></script>
        
        <!-- Section Progress Tracker -->
        <script>
            // Section Progress Tracker - 內聯版本
            class SectionProgressTracker {
                constructor() {
                    this.sections = [];
                    this.currentSection = null;
                    this.observer = null;
                    this.isScrolling = false;
                    this.scrollTimeout = null;
                    this.INTERSECTION_THRESHOLD = 0.3;
                    this.SCROLL_THROTTLE = 16;
                    this.init();
                }
                
                init() {
                    if (document.readyState === 'loading') {
                        document.addEventListener('DOMContentLoaded', () => this.setup());
                    } else {
                        this.setup();
                    }
                }
                
                setup() {
                    this.collectSections();
                    this.setupIntersectionObserver();
                    this.setupScrollListener();
                    this.updateInitialState();
                }
                
                collectSections() {
                    const navItems = Array.from(document.querySelectorAll('.nav__item:not(.nav__item--lang)'));
                    
                    this.sections = navItems
                        .map((navItem, index) => {
                            const navLink = navItem.querySelector('.nav__link');
                            const progressFiller = navItem.querySelector('.nav-item-progress');
                            
                            if (!navLink || !progressFiller) return null;
                            if (navLink.classList.contains('nav__link--logo')) return null;
                            
                            const href = navLink.getAttribute('href');
                            if (!href || !href.startsWith('#')) return null;
                            
                            const sectionId = href.substring(1);
                            const sectionElement = document.getElementById(sectionId);
                            
                            if (!sectionElement) return null;
                            
                            return {
                                id: sectionId,
                                element: sectionElement,
                                navItem: navItem,
                                progressFiller,
                                navLink,
                                index
                            };
                        })
                        .filter(Boolean);
                }
                
                setupIntersectionObserver() {
                    const options = {
                        root: null,
                        rootMargin: '-20% 0px -20% 0px',
                        threshold: this.INTERSECTION_THRESHOLD
                    };
                    
                    this.observer = new IntersectionObserver((entries) => {
                        entries.forEach(entry => {
                            if (entry.isIntersecting) {
                                const sectionInfo = this.sections.find(s => s.element === entry.target);
                                if (sectionInfo) {
                                    this.setCurrentSection(sectionInfo);
                                }
                            }
                        });
                    }, options);
                    
                    this.sections.forEach(section => {
                        this.observer.observe(section.element);
                    });
                }
                
                setupScrollListener() {
                    window.addEventListener('locomotiveScroll', (event) => {
                        this.handleScroll(event.detail);
                    });
                    
                    window.addEventListener('scroll', () => {
                        this.handleScroll({
                            y: window.scrollY,
                            limit: document.documentElement.scrollHeight - window.innerHeight,
                            direction: 'down'
                        });
                    }, { passive: true });
                }
                
                handleScroll(scrollInfo) {
                    if (this.isScrolling) return;
                    
                    this.isScrolling = true;
                    
                    if (this.scrollTimeout) {
                        clearTimeout(this.scrollTimeout);
                    }
                    
                    this.scrollTimeout = setTimeout(() => {
                        requestAnimationFrame(() => {
                            this.updateProgress(scrollInfo);
                            this.isScrolling = false;
                        });
                    }, this.SCROLL_THROTTLE);
                }
                
                setCurrentSection(sectionInfo) {
                    if (this.currentSection === sectionInfo) return;
                    
                    if (this.currentSection) {
                        this.currentSection.navLink.classList.remove('active-section');
                    }
                    
                    this.currentSection = sectionInfo;
                    this.currentSection.navLink.classList.add('active-section');
                    
                    this.updateProgress();
                }
                
                updateProgress(scrollInfo) {
                    if (!this.currentSection) return;
                    
                    const sectionProgress = this.calculateSectionProgress(this.currentSection, scrollInfo);
                    this.updateProgressDisplay(this.currentSection, sectionProgress);
                }
                
                calculateSectionProgress(sectionInfo, scrollInfo) {
                    const element = sectionInfo.element;
                    const rect = element.getBoundingClientRect();
                    const windowHeight = window.innerHeight;
                    
                    if (rect.bottom < 0) return 100;
                    if (rect.top > windowHeight) return 0;
                    
                    const sectionHeight = rect.height;
                    const viewportHeight = windowHeight;
                    const sectionTop = rect.top;
                    const sectionBottom = rect.bottom;
                    
                    let progress = 0;
                    
                    if (sectionTop > 0) {
                        const entryProgress = Math.max(0, (viewportHeight - sectionTop) / viewportHeight);
                        progress = entryProgress * 30;
                    }
                    else if (sectionBottom > viewportHeight * 0.5) {
                        const scrollDistance = Math.abs(sectionTop);
                        const maxScrollForThisPhase = sectionHeight * 0.6;
                        const scrollProgress = Math.min(1, scrollDistance / maxScrollForThisPhase);
                        progress = 30 + (scrollProgress * 55);
                    }
                    else {
                        const exitProgress = Math.max(0, (viewportHeight * 0.5 - sectionBottom) / (viewportHeight * 0.5));
                        progress = 85 + (exitProgress * 15);
                    }
                    
                    return Math.max(0, Math.min(100, progress));
                }
                
                updateProgressDisplay(sectionInfo, progress) {
                    const { progressFiller, navLink, index } = sectionInfo;
                    
                    this.sections.forEach((section, idx) => {
                        if (section === sectionInfo) return;
                        
                        let fillPercent = 0;
                        if (idx < index) {
                            fillPercent = 100;
                        } else if (idx > index) {
                            fillPercent = 0;
                        }
                        
                        section.progressFiller.style.width = fillPercent + '%';
                        section.navLink.style.setProperty('--progress-text-start', fillPercent + '%');
                        section.navLink.classList.toggle('progress-filled', fillPercent === 100);
                    });
                    
                    progressFiller.style.width = progress + '%';
                    navLink.style.setProperty('--progress-text-start', progress + '%');
                    navLink.classList.toggle('progress-filled', progress === 100);
                }
                
                updateInitialState() {
                    const viewportCenter = window.innerHeight / 2;
                    let closestSection = null;
                    let closestDistance = Infinity;
                    
                    this.sections.forEach(section => {
                        const rect = section.element.getBoundingClientRect();
                        const sectionCenter = rect.top + rect.height / 2;
                        const distance = Math.abs(sectionCenter - viewportCenter);
                        
                        if (distance < closestDistance) {
                            closestDistance = distance;
                            closestSection = section;
                        }
                    });
                    
                    if (closestSection) {
                        this.setCurrentSection(closestSection);
                    }
                }
                
                onNavigationClick(targetSectionId) {
                    const targetSection = this.sections.find(s => s.id === targetSectionId);
                    if (!targetSection) return;
                    
                    this.setCurrentSection(targetSection);
                    
                    setTimeout(() => {
                        this.updateProgress();
                    }, 500);
                }
                
                destroy() {
                    if (this.observer) {
                        this.observer.disconnect();
                    }
                    
                    if (this.scrollTimeout) {
                        clearTimeout(this.scrollTimeout);
                    }
                }
            }
            
            // 全域實例
            let sectionProgressTracker = null;
            
            // 自動初始化
            document.addEventListener('DOMContentLoaded', () => {
                sectionProgressTracker = new SectionProgressTracker();
            });
            
            // 暴露到全域
            window.getSectionProgressTracker = () => sectionProgressTracker;
        </script>
        
        <script>
        // 初始化 Locomotive Scroll
        function initializeLocomotiveScroll() {
            const scrollContainer = document.querySelector('[data-scroll-container]');
            if (!scrollContainer) return;

            // 初始化 Locomotive Scroll（性能優化版本）
            const scroll = new LocomotiveScroll({
                el: scrollContainer,
                smooth: true,
                lerp: 0.08, // 稍微降低 lerp 值以減少計算
                multiplier: 1.0,
                smartphone: {
                    smooth: false, // 在手機上禁用平滑滾動以提升性能
                    breakpoint: 767
                },
                tablet: {
                    smooth: true,
                    breakpoint: 1024
                },
                // 性能優化選項
                reloadOnContextChange: false,
                resetNativeScroll: true
            });

            // 將 scroll 實例掛載到 window 供其他腳本使用
            window.scroll = scroll;

            // 頁面 resize 時更新 scroll
            window.addEventListener('resize', () => {
                scroll.update();
            });

            // 頁面載入完成後更新 scroll
            window.addEventListener('load', () => {
                scroll.update();
            });

            // 監聽 Locomotive Scroll 的滾動事件並觸發自定義事件（節流版本）
            let lastEventTime = 0;
            const throttleDelay = 16; // 約 60fps
            
            scroll.on('scroll', (instance) => {
                const now = Date.now();
                if (now - lastEventTime < throttleDelay) return;
                lastEventTime = now;
                
                // 觸發自定義事件，讓 header 可以監聽
                const customEvent = new CustomEvent('locomotiveScroll', {
                    detail: {
                        scroll: instance.scroll,
                        limit: instance.limit,
                        direction: instance.direction
                    }
                });
                window.dispatchEvent(customEvent);
            });

            // Locomotive Scroll 初始化完成
        }

        // 確保所有內容都可見 - 修復動畫問題（性能優化版本）
        function initializeAnimations() {
            // 批量處理 DOM 更新以提升性能
            const elementsToUpdate = [
                { selector: '.fade-in', action: 'addClass', className: 'visible' },
                { selector: '.hero-content', action: 'setOpacity', value: '1' },
                { selector: '.content-item', action: 'addClass', className: 'active', firstOnly: true }
            ];

            elementsToUpdate.forEach(({ selector, action, className, value, firstOnly }) => {
                const elements = firstOnly ? 
                    [document.querySelector(selector)] : 
                    Array.from(document.querySelectorAll(selector));
                
                elements.forEach(element => {
                    if (!element) return;
                    
                    switch (action) {
                        case 'addClass':
                            element.classList.add(className);
                            break;
                        case 'setOpacity':
                            (element as HTMLElement).style.opacity = value;
                            break;
                    }
                });
            });
        }

        // 立即執行動畫初始化
        initializeAnimations();
        
        // DOM 載入完成後執行
        document.addEventListener('DOMContentLoaded', function() {
            initializeAnimations();
            initializeLocomotiveScroll();
        });
        </script>
    </body>
</html>