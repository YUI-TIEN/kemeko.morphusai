---
import '../styles/global.css';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SECURITY_CONFIG } from '../config/animation';

export interface Props {
  title?: string;
}

const { title = "KEMEKO - ‰∏ÄÂ†¥ÊúâÊ∫´Â∫¶ÁöÑÊú™‰æÜÂ∞çË©±" } = Astro.props;

// Content Security Policy
const cspPolicy = [
  "default-src 'self'",
  "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://fonts.googleapis.com",
  "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://fonts.gstatic.com",
  "font-src 'self' https://fonts.gstatic.com",
  "connect-src 'self'",
  "img-src 'self' data: https:",
  "frame-ancestors 'none'",
  "base-uri 'self'",
  "form-action 'self'"
].join('; ');

// Set security headers (disabled in development)
if (SECURITY_CONFIG.enableCSP && import.meta.env.PROD) {
  Astro.response.headers.set('Content-Security-Policy', cspPolicy);
}
Astro.response.headers.set('X-Frame-Options', 'DENY');
Astro.response.headers.set('X-Content-Type-Options', 'nosniff');
Astro.response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
Astro.response.headers.set('Permissions-Policy', 'geolocation=(), microphone=(), camera=()');
---

<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    
    <!-- Security Meta Tags -->
    <meta name="referrer" content="strict-origin-when-cross-origin">
    <meta name="format-detection" content="telephone=no">
    
    <!-- Performance and Resource Hints -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://cdn.jsdelivr.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <link rel="dns-prefetch" href="https://cdn.jsdelivr.net">
    
    <!-- Stylesheets -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/locomotive-scroll@4.1.4/dist/locomotive-scroll.css" 
          integrity="sha256-3KWvdXPOgcQaD5mxJYhZskNvYDhZtKJVWMrGbqgbSZ8=" 
          crossorigin="anonymous">
    
    <!-- Google Fonts - Noto Sans TC ÂúìÈ´îÊõø‰ª£ÊñπÊ°à -->
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@300;400;500;700&display=swap" 
          rel="stylesheet">
</head>
<body>
    <Header />
    
    <div data-scroll-container>
        <slot />

        <Footer />
    </div>

    <script src="https://cdn.jsdelivr.net/npm/locomotive-scroll@4.1.4/dist/locomotive-scroll.min.js" 
            integrity="sha256-l0hWBfuSCOmXFTaJVZoUoLEGKrHe6pIFgZjPz8NvhMg=" 
            crossorigin="anonymous"></script>
    <script>
        // ÂàùÂßãÂåñ Locomotive Scroll - Ë®≠ÁÇ∫ÂÖ®ÂüüËÆäÊï∏
        window.scroll = null;
        
        // ÈñãÁôºÁí∞Â¢ÉÊó•Ë™åÂ∑•ÂÖ∑
        const isDev = import.meta.env.DEV || false;
        const logger = {
            log: (...args) => isDev && console.log(...args),
            warn: (...args) => isDev && console.warn(...args),
            error: (...args) => console.error(...args) // ÈåØË™§Á∏ΩÊòØÈ°ØÁ§∫
        };
        
        document.addEventListener('DOMContentLoaded', function() {
            logger.log('DOM Content Loaded');
            
            // Á≠âÂæÖ‰∏Ä‰∏ãÁ¢∫‰øù DOM ÂÆåÂÖ®Ê∫ñÂÇôÂ•Ω
            setTimeout(() => {
                const container = document.querySelector('[data-scroll-container]');
                logger.log('Scroll container found:', container);
                
                if (container) {
                    // ÂàùÂßãÂåñ Locomotive Scroll
                    window.scroll = new LocomotiveScroll({
                        el: container,
                        smooth: true,
                        multiplier: 1,
                        lerp: 0.1
                    });
                    
                    // Á¢∫‰øùÂàùÂßãÂåñÂÆåÊàêÂæåÂÜçÁ∂ÅÂÆö‰∫ã‰ª∂
                    if (window.scroll) {
                        logger.log('Locomotive Scroll initialized successfully');
                        
                        // Âú® Locomotive Scroll ÂàùÂßãÂåñÂÆåÊàêÂæåÔºåÂàùÂßãÂåñÂü∫Êú¨ KEMEKO Á≥ªÁµ±
                        setTimeout(async () => {
                            try {
                                // ÂãïÊÖãÂ∞éÂÖ•Á∞°ÂåñÁöÑÂàùÂßãÂåñ
                                const { initializeBasicSystem } = await import('/src/utils/simpleInit.js');
                                await initializeBasicSystem();
                                console.log('üéâ KEMEKO website ready');
                            } catch (error) {
                                console.warn('‚ö†Ô∏è KEMEKO initialization failed (non-critical):', error);
                            }
                        }, 200);
                    }
                } else {
                    logger.error('Scroll container not found');
                }
            }, 100);

            // ÊªæÂãïÂãïÁï´
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -100px 0px'
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                    }
                });
            }, observerOptions);

            document.querySelectorAll('.fade-in').forEach(el => {
                observer.observe(el);
            });

            // Âπ≥ÊªëÊªæÂãï - ‰ΩøÁî® Locomotive Scroll
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target && window.scroll) {
                        window.scroll.scrollTo(target, {
                            offset: -100,
                            duration: 1000
                        });
                    }
                });
            });

            // Á¢∫‰øùÈ†ÅÈù¢ÂÆåÂÖ®ËºâÂÖ•ÂæåÊõ¥Êñ∞ Locomotive Scroll
            window.addEventListener('load', () => {
                setTimeout(() => {
                    if (window.scroll) {
                        window.scroll.update();
                        logger.log('Locomotive Scroll updated');
                    }
                }, 200);
            });
        });
    </script>
</body>
</html>