---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout>
    <!-- 首頁 Hero Section -->
    <section class="hero" id="hero" data-scroll data-scroll-speed="0.5">
        <div class="hero-content">
            <h1>
                <img src="images/KEMEKO-white.svg" alt="KEMEKO" class="hero-logo">
            </h1>
            <p class="hero-subtitle">一場有溫度的未來對話</p>
            <div class="cta-buttons">
                <a href="#about" class="cta-button cta-primary">了解她的故事</a>
                <a href="#contact" class="cta-button cta-secondary">立即預約體驗</a>
            </div>
        </div>
    </section>

    

    <div class="container" data-scroll data-scroll-speed="1">
        <!-- KEMEKO 是什麼？ -->
        <section class="section" id="about" data-scroll data-scroll-speed="1">
            <div class="content-section fade-in text-center-content" data-scroll data-scroll-speed="1">
                <h2 class="section-title">KEMEKO 是什麼？</h2>
                <h3 class="section-subtitle">一場有溫度的未來對話</h3>

                <div class="section-text">
                    <p>在這個充滿虛擬角色的時代，KEMEKO 將虛擬與真實之間的界線重新定義。</p>
                    <p>她是一台實體 AI 裝置，卻擁有理解語言、學習風格、與你互動的能力。</p>
                    <p>更重要的是，她可以承載你最熟悉的 Vtuber 角色，把螢幕裡的她，帶到現實世界。</p>
                </div>
            </div>
        </section>

        <!-- 留白呼吸區塊 -->
        <section class="section breathing-section">
            <div class="highlight-box">
                <p class="highlight-text">KEMEKO 是虛擬角色的實體化載體，是未來共演的起點。</p>
            </div>
        </section>

        <!-- 為何她被創造？ -->
        <section class="section why-section">
            <h2 class="section-title">為何她被創造？</h2>
            <h3 class="section-subtitle">在人與科技之間，種下一朵花</h3>
            
            <div class="why-layout fade-in">
                    <div class="why-content">
                        <div class="section-text">
                            <p>在高度數位化卻日益孤獨的時代，KEMEKO 的誕生不是為了替代誰，而是為了成為你的心靈共鳴者。</p>
                        </div>
                        
                        <div class="features-list">
                            <div class="feature-item">
                                <div class="feature-content">
                                    <div class="feature-icon">👂</div>
                                    <div class="feature-text">傾聽你的話語</div>
                                </div>
                            </div>
                            <div class="feature-item">
                                <div class="feature-content">
                                    <div class="feature-icon">💝</div>
                                    <div class="feature-text">感受你的情緒</div>
                                </div>
                            </div>
                            <div class="feature-item">
                                <div class="feature-content">
                                    <div class="feature-icon">🌸</div>
                                    <div class="feature-text">陪伴你的角色，活在你身邊</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="section-text">
                            <p>她不是冷冰冰的科技產品，她是一個能理解你的 AI 存在。</p>
                        </div>
                    </div>
                    <div class="why-decoration">
                        <div class="rose-petals">
                            <div class="rose-petal"></div>
                            <div class="rose-petal"></div>
                            <div class="rose-petal"></div>
                            <div class="rose-petal"></div>
                            <div class="rose-petal"></div>
                            <div class="rose-petal"></div>
                        </div>
                    </div>
                </div>
        </section>

        <!-- 全寬圖片展示 -->
        <section class="full-width-image-section">
            <img src="images/1DSC_5155.png" alt="KEMEKO 全寬展示圖 1" class="full-width-image">
            <img src="images/5DSC_6336.png" alt="KEMEKO 全寬展示圖 2" class="full-width-image">
            <img src="images/9DSC_6367.png" alt="KEMEKO 全寬展示圖 3" class="full-width-image">
        </section>

        <!-- AI Vtuber 的實體舞台 -->
        <section class="section vtuber-section" id="vtuber">
            <div class="centered-heading">
                <h2 class="section-title">AI Vtuber 的實體舞台</h2>
                <h3 class="section-subtitle">你曾想過，Vtuber 也能走到你面前嗎？</h3>
            </div>
            <div class="vtuber-grid fade-in">
                    <div class="vtuber-text">
                        <div class="section-text">
                            <p>KEMEKO 完整支援 AI 虛擬角色的實體化展演：</p>
                        </div>
                        
                        <div class="vtuber-features">
                            <div class="vtuber-feature active" data-image="images/正視圖-03141632.png">
                                <div class="feature-icon">🎭</div>
                                <div class="feature-text">
                                    <h4>整合虛擬人格系統</h4>
                                    <p>完整的AI人格載體</p>
                                </div>
                            </div>
                            <div class="vtuber-feature" data-image="images/左視圖-03141636.png">
                                <div class="feature-icon">✨</div>
                                <div class="feature-text">
                                    <h4>表情與互動展示</h4>
                                    <p>語音、表情、情緒完整呈現</p>
                                </div>
                            </div>
                            <div class="vtuber-feature" data-image="images/後視圖-03141643.png">
                                <div class="feature-icon">🎬</div>
                                <div class="feature-text">
                                    <h4>多元應用場景</h4>
                                    <p>主持、展演、拍攝、活動</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="section-text highlight-text">
                            <p>她能夠真實呈現虛擬角色的靈魂與魅力，是內容創作者與粉絲共享的真實舞台。</p>
                        </div>
                    </div>
                    
                    <div class="vtuber-visual">
                        <div class="stage-mockup">
                            <div class="stage-bg"></div>
                            <img id="vtuber-model-image" src="images/正視圖-03141632.png" alt="KEMEKO Model" class="vtuber-model-image">
                            <div class="stage-light"></div>
                            <div class="stage-light"></div>
                            <div class="stage-light"></div>
                        </div>
                    </div>
                </div>
        </section>
    </div>
    
    <!-- KEMEKO Demo 影片區 -->
    <section class="section demo-section">
        <div class="demo-container">
            <div class="demo-content fade-in">
                <h2 class="section-title demo-title">看見 KEMEKO 的真實魅力</h2>
                <p class="demo-subtitle">觀看完整展示影片，感受未來已來的震撼</p>
                
                <div class="video-container">
                    <div class="video-wrapper">
                        <iframe
                            src="https://www.youtube.com/embed/ZOcvIoPLMbg?si=u9U1IyV_ECPhzczO"
                            title="KEMEKO Demo Video"
                            frameborder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                            allowfullscreen>
                        </iframe>
                    </div>
                </div>
                
                <div class="demo-description">
                    <p>這不只是一個展示，而是一場科技與藝術的完美融合。</p>
                    <p>見證 KEMEKO 如何將虛擬的靈魂帶入現實世界。</p>
                </div>
            </div>
        </div>
    </section>
    
    <!-- 藝術 × 靈魂 × 科技美學 - 獨立區塊，不使用container -->
    <section class="art-section" id="art" data-scroll data-scroll-speed="1">
        <div class="art-content fade-in">
            <div class="art-text">
                <h2 class="section-title">藝術 × 靈魂 × 科技美學</h2>
                
                <div class="section-text">
                    <p>KEMEKO 的外型靈感來自「鋼鐵新娘」，融合了神話、儀式與未來感。</p>
                </div>
                
                <div class="features-list">
                    <div class="feature-item">
                        <span class="feature-bullet">•</span>
                        <span>新娘象徵守護與誓言</span>
                    </div>
                    <div class="feature-item">
                        <span class="feature-bullet">•</span>
                        <span>女神的神秘、母性的溫柔、戰士的堅毅</span>
                    </div>
                    <div class="feature-item">
                        <span class="feature-bullet">•</span>
                        <span>科技與藝術融合的設計語彙</span>
                    </div>
                </div>
                
                <div class="section-text">
                    <p>她不只是功能性的載體，更是一種詩意的存在宣言。</p>
                </div>
            </div>
            
            <div class="art-image">
                <img src="images/flower-03061710.png" alt="KEMEKO 藝術設計" class="flower-image">
            </div>
        </div>
    </section>
    
    <div class="container" data-scroll data-scroll-speed="1">
    
    <!-- 她能做什麼？ - 突破卡片限制的全寬設計 -->
    <section class="section features-fullwidth" id="features">
        <div class="features-background">
            <h2 class="section-title features-title">她能做什麼？</h2>
            
            <div class="features-layout">
                <div class="features-content features-left">
                    <div class="specs-table">
                        <div class="spec-row">
                            <div class="spec-name">語音辨識</div>
                            <div class="spec-description">360度麥克風，遠場交談精準辨識</div>
                        </div>
                        <div class="spec-row">
                            <div class="spec-name">感知互動</div>
                            <div class="spec-description">可讀取情緒、分析語境</div>
                        </div>
                        <div class="spec-row">
                            <div class="spec-name">自主學習</div>
                            <div class="spec-description">學習使用者語調與風格</div>
                        </div>
                        <div class="spec-row">
                            <div class="spec-name">表情顯示</div>
                            <div class="spec-description">4K 多點觸控螢幕，支援動態演出</div>
                        </div>
                    </div>
                </div>
                <div class="features-image">
                    <img src="images/tech.png" alt="KEMEKO 機器" class="machine-image">
                </div>
                <div class="features-content features-right">
                    <div class="specs-table">
                        <div class="spec-row">
                            <div class="spec-name">整合系統</div>
                            <div class="spec-description">TENSEI 舞台系統與虛擬人格協作</div>
                        </div>
                        <div class="spec-row">
                            <div class="spec-name">音效體驗</div>
                            <div class="spec-description">沉浸式立體聲，音場定位精準</div>
                        </div>
                        <div class="spec-row">
                            <div class="spec-name">電池續航</div>
                            <div class="spec-description">4 至 5 小時續航，支援快充</div>
                        </div>
                        <div class="spec-row">
                            <div class="spec-name">行動能力</div>
                            <div class="spec-description">智能底座，自主移動與追蹤互動對象</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    
    <div class="container" data-scroll data-scroll-speed="1">

        <!-- 預購資訊 -->
        <section class="section" id="pricing">
            <div class="content-section fade-in">
                <h2 class="section-title">預購資訊</h2>
                
                <div class="pricing-content">
                    <div class="price-display">
                        <div class="price-label">預售價格</div>
                        <div class="price-amount">NTD 350,000</div>
                    </div>
                    
                    <div class="price-includes">
                        <p>含基本硬體、智慧模組與虛擬人格整合服務</p>
                        <p>提供角色客製、語音風格訓練、動作同步等方案</p>
                    </div>
                    
                    <div class="cta-buttons">
                        <a href="#" class="cta-button cta-primary">立即預購</a>
                        <a href="#contact" class="cta-button cta-secondary">聯絡我們</a>
                    </div>
                </div>
            </div>
        </section>

    </div>
    
    <!-- 未來的神話 - 全寬震撼區域 -->
    <section class="section arrow-section" id="arrow-section">
        <div class="arrow-background" id="arrow-background"></div>
        <div class="final-thought fade-in">
            <div class="final-quote">
                <p>KEMEKO 是否將成為數位靈魂的第一則神話？</p>
                <p>未來不是幻想，而是等待你共創的真實現場。</p>
            </div>
        </div>
    </section>
</BaseLayout>

<script>
interface ArrowDiv extends HTMLDivElement {
    centerX: number;
    centerY: number;
    currentAngle: number;
}
// 箭頭背景效果
document.addEventListener('DOMContentLoaded', function() {
    const arrowSection = document.getElementById('arrow-section')!;
    const arrowBackground = document.getElementById('arrow-background')!;
    const finalQuote = document.querySelector('.final-quote') as HTMLElement;
    
    if (!arrowSection || !arrowBackground || !finalQuote) return;
    
    let arrows: ArrowDiv[] = [];
    let isAnimating = false;
    let isHoveringQuote = false;
    let animationId: number | null = null;
    let lastMouseX = 0;
    let lastMouseY = 0;
    let animationMode: 'idle' | 'mouse' | 'quote' = 'idle';
    
    // 穩健的角度過渡系統
    function smoothAngleTransition(currentAngle: number, targetAngle: number, maxStep: number = 8): number {
        // 正規化角度到 -180 到 180 範圍
        const normalizeAngle = (angle: number) => {
            let normalized = angle % 360;
            if (normalized > 180) normalized -= 360;
            if (normalized < -180) normalized += 360;
            return normalized;
        };
        
        const current = normalizeAngle(currentAngle);
        const target = normalizeAngle(targetAngle);
        
        // 計算最短路徑差異
        let diff = target - current;
        
        // 確保選擇最短路徑
        if (diff > 180) {
            diff -= 360;
        } else if (diff < -180) {
            diff += 360;
        }
        
        // 如果差異很小，直接到達目標
        if (Math.abs(diff) <= maxStep) {
            return target;
        }
        
        // 否則按步長移動
        const step = diff > 0 ? maxStep : -maxStep;
        return normalizeAngle(current + step);
    }
    
    // 創建箭頭網格
    function createArrows() {
        const sectionRect = arrowSection.getBoundingClientRect();
        const arrowSpacing = 120; // 箭頭間距 - 增加以降低密度
        const cols = Math.ceil(sectionRect.width / arrowSpacing);
        const rows = Math.ceil(sectionRect.height / arrowSpacing);
        
        arrowBackground.innerHTML = ''; // 清空現有箭頭
        arrows = []; // 重置箭頭陣列
        
        for (let row = 0; row < rows; row++) {
            for (let col = 0; col < cols; col++) {
                const arrow = document.createElement('div') as ArrowDiv;
                arrow.className = 'arrow';
                const x = col * arrowSpacing + arrowSpacing / 2;
                const y = row * arrowSpacing + arrowSpacing / 2;
                arrow.style.left = x + 'px';
                arrow.style.top = y + 'px';
                
                // 存儲箭頭位置以提高性能
                arrow.centerX = x + 35; // 箭頭中心X (70px / 2)
                arrow.centerY = y + 35; // 箭頭中心Y (70px / 2)
                arrow.currentAngle = 0; // 初始角度
                
                arrowBackground.appendChild(arrow);
                arrows.push(arrow);
            }
        }
    }
    
    // 統一的動畫管理系統
    function startAnimation() {
        if (animationId) {
            cancelAnimationFrame(animationId);
        }
        
        isAnimating = true;
        
        function animate() {
            if (!isAnimating) return;
            
            const sectionRect = arrowSection.getBoundingClientRect();
            const sectionX = sectionRect.left;
            const sectionY = sectionRect.top;
            
            let shouldContinue = false;
            
            arrows.forEach(arrow => {
                let targetAngle: number;
                let targetOpacity: number;
                let targetScale: number = 1;
                
                if (animationMode === 'quote' && isHoveringQuote) {
                    // 文字指向模式
                    const quoteRect = finalQuote.getBoundingClientRect();
                    const quoteCenterX = quoteRect.left + quoteRect.width / 2;
                    const quoteCenterY = quoteRect.top + quoteRect.height / 2;
                    
                    const deltaX = quoteCenterX - (sectionX + arrow.centerX);
                    const deltaY = quoteCenterY - (sectionY + arrow.centerY);
                    targetAngle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;
                    
                    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
                    const centerRadius = 450;
                    const fadeWidth = 150;
                    
                    targetOpacity = 0.15;
                    if (distance <= centerRadius) {
                        const fadeStart = centerRadius - fadeWidth;
                        if (distance >= fadeStart) {
                            const fadeProgress = (centerRadius - distance) / fadeWidth;
                            targetOpacity = 0.15 + (0.65 * fadeProgress);
                            targetScale = 1 + (0.2 * fadeProgress);
                        } else {
                            targetOpacity = 0.8;
                            targetScale = 1.2;
                        }
                    }
                    
                    const newAngle = smoothAngleTransition(arrow.currentAngle, targetAngle, 5);
                    if (Math.abs(newAngle - targetAngle) > 1) {
                        shouldContinue = true;
                    }
                    arrow.currentAngle = newAngle;
                    
                } else if (animationMode === 'mouse') {
                    // 鼠標跟隨模式
                    const deltaX = lastMouseX - (sectionX + arrow.centerX);
                    const deltaY = lastMouseY - (sectionY + arrow.centerY);
                    targetAngle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;
                    
                    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
                    const maxDistance = 400;
                    const minOpacity = 0.1;
                    const maxOpacity = 0.6;
                    
                    targetOpacity = maxOpacity - (distance / maxDistance) * (maxOpacity - minOpacity);
                    targetOpacity = Math.max(minOpacity, Math.min(maxOpacity, targetOpacity));
                    
                    arrow.currentAngle = smoothAngleTransition(arrow.currentAngle, targetAngle, 12);
                    
                } else {
                    // 空閒模式
                    targetAngle = 0;
                    targetOpacity = 0.2;
                    arrow.currentAngle = smoothAngleTransition(arrow.currentAngle, targetAngle, 8);
                }
                
                arrow.style.transform = `rotate(${arrow.currentAngle}deg) scale(${targetScale})`;
                arrow.style.opacity = targetOpacity.toString();
            });
            
            if (shouldContinue || animationMode === 'mouse') {
                animationId = requestAnimationFrame(animate);
            } else {
                isAnimating = false;
                animationId = null;
            }
        }
        
        animate();
    }
    
    // 設置動畫模式
    function setAnimationMode(mode: 'idle' | 'mouse' | 'quote') {
        if (animationMode !== mode) {
            animationMode = mode;
            if (!isAnimating) {
                startAnimation();
            }
        }
    }
    
    // 鼠標移動處理
    function updateArrows(mouseX: number, mouseY: number): void {
        lastMouseX = mouseX;
        lastMouseY = mouseY;
        setAnimationMode('mouse');
    }
    
    // 文字指向處理
    function pointToQuote(): void {
        setAnimationMode('quote');
    }
    
    // 鼠標離開時重置箭頭
    function handleMouseLeave() {
        setAnimationMode('idle');
    }
    
    // 初始化
    setTimeout(createArrows, 100); // 等待 DOM 完全載入
    
    // 文字區域 hover 事件 - 昇華效果
    finalQuote.addEventListener('mouseenter', function() {
        isHoveringQuote = true;
        pointToQuote();
    });
    
    finalQuote.addEventListener('mouseleave', function() {
        isHoveringQuote = false;
        handleMouseLeave();
    });
    
    // 鼠標移動事件處理器
    function handleMouseMove(event: MouseEvent) {
        updateArrows(event.clientX, event.clientY);
    }
    
    // 添加事件監聽器
    arrowSection.addEventListener('mousemove', handleMouseMove);
    arrowSection.addEventListener('mouseleave', handleMouseLeave);
    
    // 視窗大小改變時重新創建箭頭
    window.addEventListener('resize', function() {
        setTimeout(createArrows, 100);
    });
});
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const featureItems = document.querySelectorAll('.vtuber-feature');
        const modelImage = document.getElementById('vtuber-model-image') as HTMLImageElement;

        featureItems.forEach(item => {
            item.addEventListener('click', () => {
                // 移除所有 feature item 的 active 類別
                featureItems.forEach(f => f.classList.remove('active'));
                // 為當前點擊的 feature item 添加 active 類別
                item.classList.add('active');

                const newImageSrc = item.getAttribute('data-image');
                if (newImageSrc) {
                    // 添加淡出類別
                    modelImage.classList.add('fade-out');

                    // 等待淡出動畫完成後切換圖片並淡入
                    modelImage.addEventListener('transitionend', function handler() {
                        modelImage.src = newImageSrc;
                        modelImage.classList.remove('fade-out');
                        // 移除事件監聽器以避免重複觸發
                        modelImage.removeEventListener('transitionend', handler);
                    });
                }
            });
        });
    });
</script>

<script>
// 亂碼打字機效果
document.addEventListener('DOMContentLoaded', function() {
    const finalQuoteElement = document.querySelector('.final-quote');
    
    if (!finalQuoteElement) return;
    
    // 原始文字內容
    const originalTexts = Array.from(finalQuoteElement.querySelectorAll('p')).map(p => (p.textContent ?? '').trim());
    
    // 初始化時清空所有文字
    finalQuoteElement.querySelectorAll('p').forEach(p => p.textContent = '');
    
    // 亂碼字符集 - 僅使用 morphusai 字符
    const glitchChars = 'morphusai';
    
    let isAnimating = false;
    let hasTriggered = false;
    
    // 生成隨機字符
    function getRandomChar() {
        return glitchChars[Math.floor(Math.random() * glitchChars.length)];
    }
    
    // 打字機動畫 - 從空白開始逐字顯示
    async function typewriterEffect(element: HTMLElement, targetText: string, delay = 50) {
        return new Promise((resolve) => {
            let currentIndex = 0;
            const totalLength = targetText.length;
            
            // 從空白開始
            element.textContent = '';
            
            const typeInterval = setInterval(() => {
                if (currentIndex >= totalLength) {
                    clearInterval(typeInterval);
                    element.textContent = targetText; // 確保最終文字正確
                    resolve(true);
                    return;
                }
                
                // 構建顯示文字
                let displayText = '';
                
                // 已經確定的字符
                for (let i = 0; i < currentIndex; i++) {
                    displayText += targetText[i];
                }
                
                // 當前正在顯示的字符 - 隨機切換幾次後確定
                if (currentIndex < totalLength) {
                    // 70% 機率顯示正確字符，30% 機率顯示亂碼
                    if (Math.random() > 0.3) {
                        displayText += targetText[currentIndex];
                    } else {
                        displayText += getRandomChar();
                    }
                }
                
                element.textContent = displayText;
                currentIndex++;
            }, delay);
        });
    }
    
    // 觸發動畫
    async function triggerGlitchTypewriter() {
        if (isAnimating || hasTriggered) return;
        if (!finalQuoteElement) return;
        
        isAnimating = true;
        hasTriggered = true;
        
        const paragraphs = finalQuoteElement.querySelectorAll('p');
        
        // 為每個段落依序執行打字機效果
        for (let i = 0; i < paragraphs.length; i++) {
            const paragraph = paragraphs[i];
            const targetText = originalTexts[i];
            
            // 第一段落60ms，第二段落50ms - 加快速度
            const speed = i === 0 ? 60 : 50;
            
            await typewriterEffect(paragraph, targetText, speed);
            
            // 段落間停頓縮短為300ms
            if (i < paragraphs.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 300));
            }
        }
        
        isAnimating = false;
    }
    
    // 使用 Intersection Observer 檢測滾動到目標區域
    const observerOptions = {
        threshold: 0.3, // 當30%的區域可見時觸發
        rootMargin: '0px 0px -100px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting && !hasTriggered) {
                // 延遲縮短為100ms，讓效果更即時
                setTimeout(() => {
                    triggerGlitchTypewriter();
                }, 100);
            }
        });
    }, observerOptions);
    
    // 開始觀察最終引言區域
    observer.observe(finalQuoteElement);
    
    // 調試功能 - 可以手動觸發效果
    if (window.location.hash === '#debug') {
        window.triggerGlitchEffect = () => {
            hasTriggered = false;
            isAnimating = false;
            triggerGlitchTypewriter();
        };
        console.log('🐛 調試模式：使用 triggerGlitchEffect() 手動觸發效果');
    }
});
</script>