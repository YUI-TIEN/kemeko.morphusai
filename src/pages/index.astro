---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout>
    <!-- 首頁 Hero Section -->
    <section class="hero" id="hero">
        <div class="hero-content" data-scroll data-scroll-speed="1">
            <h1>
                <img src="images/KEMEKO-white.svg" alt="KEMEKO" class="hero-logo">
            </h1>
            <p class="hero-subtitle">一場有溫度的未來對話</p>
            <div class="cta-buttons">
                <a href="#about" class="cta-button cta-primary">了解她的故事</a>
                <a href="#contact" class="cta-button cta-secondary">立即預約體驗</a>
            </div>
        </div>
    </section>

    

    <div class="container">
        <!-- KEMEKO 是什麼？ -->
        <section class="section about-section" id="about">
            <div class="content-section fade-in text-center-content" data-scroll data-scroll-speed="1">
                <h2 class="section-title">關於 KEMEKO</h2>
                <h3 class="section-subtitle">一場有溫度的未來對話</h3>

                <div class="section-text">
                    <p>在這個充滿虛擬角色的時代，KEMEKO 將虛擬與真實之間的界線重新定義。</p>
                    <p>她是一台實體 AI 裝置，卻擁有理解語言、學習風格、與你互動的能力。</p>
                    <p>更重要的是，她可以承載你最熟悉的 Vtuber 角色，把螢幕裡的她，帶到現實世界。</p>
                </div>
            </div>
            
            <!-- 留白呼吸區塊 - 併入 about section -->
            <div class="breathing-section">
                <div class="highlight-box" data-scroll data-scroll-speed="1">
                    <p class="highlight-text">KEMEKO 是虛擬靈魂的實體容器，是未來共演的序章。</p>
                </div>
            </div>
        </section>

        <!-- 為何她被創造？ -->
        <section class="section why-section" id="why">
            <div class="why-container" data-scroll data-scroll-speed="1">
                <div class="why-header">
                    <h2 class="section-title">創造之由</h2>
                    <h3 class="section-subtitle">讓科技與人性之間開出一朵花</h3>
                </div>
                
                <div class="why-content">
                    <div class="why-intro">
                        <p>在高度數位化卻日益孤獨的時代，KEMEKO 的誕生不是為了替代誰，而是為了成為你的心靈共鳴者。</p>
                    </div>
                    
                    <div class="why-features">
                        <div class="feature-card">
                            <div class="feature-icon">👂</div>
                            <h4 class="feature-title">傾聽你的話語</h4>
                            <p class="feature-description">真正的傾聽者，理解你的每一個字</p>
                        </div>
                        <div class="feature-card">
                            <div class="feature-icon">💝</div>
                            <h4 class="feature-title">感受你的情緒</h4>
                            <p class="feature-description">敏銳感知，與你情感同頻</p>
                        </div>
                        <div class="feature-card">
                            <div class="feature-icon">🌸</div>
                            <h4 class="feature-title">陪伴你的角色，活在你身邊</h4>
                            <p class="feature-description">虛擬與現實的完美結合</p>
                        </div>
                    </div>
                    
                    <div class="why-conclusion">
                        <p>她不是冰冷的裝置，而是一份溫柔理解。</p>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <!-- 層疊圖片展示 - 獨立於 container 外 -->
        <div class="image_cards_wrap">
            <div class="image_cards_wrap__card">
                <div class="image_cards_wrap__card-stick image1">
                </div> 
            </div>
            <div class="image_cards_wrap__card">
                <div class="image_cards_wrap__card-stick image2">
                </div> 
            </div>
            <div class="image_cards_wrap__card">
                <div class="image_cards_wrap__card-stick image3">
                </div> 
            </div>
    </div>

    <div class="container">
        <!-- AI Vtuber 的實體舞台與展示 -->
        <section class="section vtuber-demo-section" id="vtuber">
            <div class="vtuber-demo-container" data-scroll data-scroll-speed="1">
                <div class="vtuber-demo-content fade-in">
                    <div class="centered-heading">
                        <h2 class="section-title text-purple">Vtuber 的真實舞台</h2>
                        <h3 class="section-subtitle">想像中的她，如今近在咫尺。</h3>
                    </div>
                    
                    <div class="vtuber-intro">
                        <div class="section-text">
                            <p>你曾想過，Vtuber 也能走到你面前嗎？</p>
                        </div>
                    </div>
                    
                    <div class="vtuber-video-showcase">
                        <div class="video-container">
                            <iframe
                                src="https://www.youtube.com/embed/ZOcvIoPLMbg?si=u9U1IyV_ECPhzczO"
                                title="KEMEKO Demo Video"
                                frameborder="0"
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                                allowfullscreen>
                            </iframe>
                        </div>
                    </div>
                    
                    <div class="vtuber-features-grid">
                        <div class="feature-card">
                            <div class="feature-icon">🎭</div>
                            <div class="feature-content">
                                <h4>整合虛擬人格系統</h4>
                                <p>完整的AI人格載體，真實呈現虛擬角色的靈魂</p>
                            </div>
                        </div>
                        <div class="feature-card">
                            <div class="feature-icon">✨</div>
                            <div class="feature-content">
                                <h4>表情與互動展示</h4>
                                <p>語音、表情、情緒完整呈現，生動的互動體驗</p>
                            </div>
                        </div>
                        <div class="feature-card">
                            <div class="feature-icon">🎬</div>
                            <div class="feature-content">
                                <h4>多元應用場景</h4>
                                <p>主持、展演、拍攝、活動，無限可能的創作平台</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="vtuber-closing">
                        <div class="section-text highlight-text text-purple">
                            <p>這不只是一個展示，而是一場科技與藝術的交響盛宴。</p>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
    
    <!-- 藝術 × 靈魂 × 科技美學 - 獨立區塊，不使用container -->
    <section class="art-section" id="art">
        <div class="art-content fade-in">
            <div class="art-text" data-scroll data-scroll-speed="1">
                <h2 class="section-title">靈魂科技 × 藝術美學</h2>
                
                <div class="section-text">
                    <p>KEMEKO 的外型靈感來自「鋼鐵新娘」，融合了神話、儀式與未來感。</p>
                </div>
                
                <div class="features-list">
                    <div class="feature-item">
                        <span>新娘象徵守護與誓言</span>
                    </div>
                    <div class="feature-item">
                        <span>女神的神秘、母性的溫柔、戰士的堅毅</span>
                    </div>
                    <div class="feature-item">
                        <span>科技與藝術融合的設計語彙</span>
                    </div>
                </div>
                
                <div class="section-text">
                    <p>她，是一場詩意的存在宣言</p>
                </div>
            </div>
            
            
        </div>
    </section>
    
    <div class="container">
    
    <!-- 她能做什麼？ - 突破卡片限制的全寬設計 -->
    <section class="section features-fullwidth" id="features">
        <div class="features-background">
            <h2 class="section-title features-title">她的可能</h2>
            
            <div class="features-layout">
                <div class="features-content" data-scroll data-scroll-speed="1">
                    <div class="specs-table">
                        <div class="spec-row">
                            <div class="spec-name">語音辨識</div>
                            <div class="spec-description">360度麥克風，遠場交談精準辨識</div>
                        </div>
                        <div class="spec-row">
                            <div class="spec-name">感知互動</div>
                            <div class="spec-description">可讀取情緒、分析語境</div>
                        </div>
                        <div class="spec-row">
                            <div class="spec-name">自主學習</div>
                            <div class="spec-description">學習使用者語調與風格</div>
                        </div>
                        <div class="spec-row">
                            <div class="spec-name">表情顯示</div>
                            <div class="spec-description">4K 多點觸控螢幕，支援動態演出</div>
                        </div>
                    </div>
                </div>
                <div class="features-image" data-scroll data-scroll-speed="1">
                    <img src="images/tech.png" alt="KEMEKO 機器" class="machine-image">
                </div>
                <div class="features-content" data-scroll data-scroll-speed="1">
                    <div class="specs-table">
                        <div class="spec-row">
                            <div class="spec-name">整合系統</div>
                            <div class="spec-description">TENSEI 舞台系統與虛擬人格協作</div>
                        </div>
                        <div class="spec-row">
                            <div class="spec-name">音效體驗</div>
                            <div class="spec-description">沉浸式立體聲，音場定位精準</div>
                        </div>
                        <div class="spec-row">
                            <div class="spec-name">電池續航</div>
                            <div class="spec-description">4 至 5 小時續航，支援快充</div>
                        </div>
                        <div class="spec-row">
                            <div class="spec-name">行動能力</div>
                            <div class="spec-description">智能底座，自主移動與追蹤互動對象</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    
    <div class="container">

        <!-- 預購資訊 -->
        <section class="section pricing-section" id="pricing">
            <div class="pricing-container" data-scroll data-scroll-speed="1">
                <div class="pricing-header">
                    <h2 class="section-title">預購資訊</h2>
                    <h3 class="section-subtitle">你的未來旅程，從此刻出發</h3>
                </div>
                
                <div class="pricing-layout" data-scroll data-scroll-speed="1">
                    <div class="pricing-image">
                        <div class="product-showcase">
                            <img src="images/4DSC_6333.png" alt="KEMEKO 產品展示" class="product-image">
                        </div>
                    </div>
                    
                    <div class="pricing-info">
                        <div class="pricing-card">
                            <div class="pricing-header-card">
                                <div class="price-label">預售價格</div>
                                <div class="price-amount">
                                    <span class="currency">NTD</span>
                                    <span class="amount">350,000</span>
                                </div>
                            </div>
                            
                            <div class="pricing-features">
                                <div class="feature-item">
                                    <div class="feature-icon">🎯</div>
                                    <div class="feature-text">基本硬體與智慧模組</div>
                                </div>
                                <div class="feature-item">
                                    <div class="feature-icon">🤖</div>
                                    <div class="feature-text">虛擬人格整合服務</div>
                                </div>
                                <div class="feature-item">
                                    <div class="feature-icon">✨</div>
                                    <div class="feature-text">角色客製化與語音訓練</div>
                                </div>
                                <div class="feature-item">
                                    <div class="feature-icon">🎭</div>
                                    <div class="feature-text">動作同步技術支援</div>
                                </div>
                            </div>
                            
                            <div class="pricing-actions">
                                <a href="#" class="cta-button cta-primary">立即預購</a>
                                <a href="#contact" class="cta-button cta-secondary">了解更多</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

    </div>
    
    <!-- 未來的神話 - 全寬震撼區域 -->
    <section class="section arrow-section" id="arrow-section">
        <div class="arrow-background" id="arrow-background"></div>
        <div class="final-thought fade-in" data-scroll data-scroll-speed="1">
            <div class="final-quote">
                <p>她，是否是數位靈魂的第一則傳奇？</p>
                <p>未來，不是遙遠夢想，而是你我共譜的現在。</p>
            </div>
        </div>
    </section>
</BaseLayout>

<script>
interface ArrowDiv extends HTMLDivElement {
    centerX: number;
    centerY: number;
    currentAngle: number;
}
// 箭頭背景效果
document.addEventListener('DOMContentLoaded', function() {
    const arrowSection = document.getElementById('arrow-section')!;
    const arrowBackground = document.getElementById('arrow-background')!;
    const finalQuote = document.querySelector('.final-quote') as HTMLElement;
    
    if (!arrowSection || !arrowBackground || !finalQuote) return;
    
    let arrows: ArrowDiv[] = [];
    let isAnimating = false;
    let isHoveringQuote = false;
    let animationId: number | null = null;
    let lastMouseX = 0;
    let lastMouseY = 0;
    let animationMode: 'idle' | 'mouse' = 'idle';
    
    // 正確處理角度環形性質的過渡系統
    function smoothAngleTransition(currentAngle: number, targetAngle: number, maxStep: number = 12): number {
        // 將 targetAngle 調整到與 currentAngle 接近的範圍
        // 這樣可以避免跨越 0/360 度邊界時的跳變
        let adjustedTargetAngle = targetAngle;
        while (adjustedTargetAngle - currentAngle > 180) {
            adjustedTargetAngle -= 360;
        }
        while (adjustedTargetAngle - currentAngle < -180) {
            adjustedTargetAngle += 360;
        }

        // 計算兩個角度之間的差異
        let angleDiff = adjustedTargetAngle - currentAngle;

        // 如果差異很小，直接到達目標
        if (Math.abs(angleDiff) <= maxStep) {
            return adjustedTargetAngle; // 返回調整後的目標角度
        }

        // 按步長移動
        const step = angleDiff > 0 ? maxStep : -maxStep;
        return currentAngle + step;
    }
    
    // 創建箭頭網格
    function createArrows() {
        const sectionRect = arrowSection.getBoundingClientRect();
        const arrowSpacing = 200; // 箭頭間距 (數值越大，密度越低)
        const cols = Math.ceil(sectionRect.width / arrowSpacing);
        const rows = Math.ceil(sectionRect.height / arrowSpacing);
        
        arrowBackground.innerHTML = ''; // 清空現有箭頭
        arrows = []; // 重置箭頭陣列
        
        for (let row = 0; row < rows; row++) {
            for (let col = 0; col < cols; col++) {
                const arrow = document.createElement('div') as ArrowDiv;
                arrow.className = 'arrow';
                const x = col * arrowSpacing + arrowSpacing / 2;
                const y = row * arrowSpacing + arrowSpacing / 2;
                arrow.style.left = x + 'px';
                arrow.style.top = y + 'px';
                
                // 存儲箭頭位置以提高性能
                arrow.centerX = x + 45; // 箭頭中心X (90px / 2)
                arrow.centerY = y + 45; // 箭頭中心Y (90px / 2)
                arrow.currentAngle = 0; // 初始角度
                
                arrowBackground.appendChild(arrow);
                arrows.push(arrow);
            }
        }
    }
    
    // 統一的動畫管理系統
    function startAnimation() {
        if (animationId) {
            cancelAnimationFrame(animationId);
        }
        
        isAnimating = true;
        
        function animate() {
            if (!isAnimating) return;
            
            const sectionRect = arrowSection.getBoundingClientRect();
            const sectionX = sectionRect.left;
            const sectionY = sectionRect.top;
            
            let shouldContinue = false;
            
            arrows.forEach(arrow => {
                let targetAngle: number;
                let targetOpacity: number;
                let targetScale: number = 1;
                
                if (animationMode === 'mouse') {
                    // 鼠標跟隨模式
                    const deltaX = lastMouseX - (sectionX + arrow.centerX);
                    const deltaY = lastMouseY - (sectionY + arrow.centerY);
                    targetAngle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;
                    
                    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
                    const maxDistance = 400;
                    const minOpacity = 0.1;
                    const maxOpacity = 0.6;
                    
                    // 基礎透明度計算
                    let baseOpacity = maxOpacity - (distance / maxDistance) * (maxOpacity - minOpacity);
                    baseOpacity = Math.max(minOpacity, Math.min(maxOpacity, baseOpacity));
                    
                    // 如果hover在文字上，降低透明度
                    targetOpacity = isHoveringQuote ? baseOpacity * 0 : baseOpacity;
                    
                    // 使用適中的步長，避免過度旋轉
                    arrow.currentAngle = smoothAngleTransition(arrow.currentAngle, targetAngle, 10);
                    
                    // 檢查是否需要繼續動畫
                    if (Math.abs(arrow.currentAngle - targetAngle) > 3) {
                        shouldContinue = true;
                    }
                    
                } else {
                    // 空閒模式
                    targetAngle = 0;
                    targetOpacity = isHoveringQuote ? 0.05 : 0.2;
                    arrow.currentAngle = smoothAngleTransition(arrow.currentAngle, targetAngle, 8);
                }
                
                arrow.style.transform = `rotate(${arrow.currentAngle}deg) scale(${targetScale})`;
                arrow.style.opacity = targetOpacity.toString();
            });
            
            if (shouldContinue || animationMode === 'mouse' || isHoveringQuote) {
                animationId = requestAnimationFrame(animate);
            } else {
                isAnimating = false;
                animationId = null;
            }
        }
        
        animate();
    }
    
    // 設置動畫模式
    function setAnimationMode(mode: 'idle' | 'mouse') {
        if (animationMode !== mode) {
            animationMode = mode;
            
            if (!isAnimating) {
                startAnimation();
            }
        }
    }
    
    // 鼠標移動處理（節流版本）
    let lastMouseUpdateTime = 0;
    function updateArrows(mouseX: number, mouseY: number): void {
        const now = Date.now();
        if (now - lastMouseUpdateTime < 16) return; // 限制為 60fps
        lastMouseUpdateTime = now;
        
        // 檢查鼠標是否有顯著移動
        if (Math.abs(mouseX - lastMouseX) < 5 && Math.abs(mouseY - lastMouseY) < 5) return;
        
        lastMouseX = mouseX;
        lastMouseY = mouseY;
        setAnimationMode('mouse');
    }
    
    // 文字hover處理
    function handleQuoteHover(): void {
        if (!isAnimating) {
            startAnimation();
        }
    }
    
    // 鼠標離開時重置箭頭
    function handleMouseLeave() {
        setAnimationMode('idle');
    }
    
    // 初始化
    setTimeout(createArrows, 100); // 等待 DOM 完全載入
    
    // 文字區域 hover 事件 - 箭頭淡出效果
    finalQuote.addEventListener('mouseenter', function() {
        isHoveringQuote = true;
        handleQuoteHover();
    });
    
    finalQuote.addEventListener('mouseleave', function() {
        isHoveringQuote = false;
        handleQuoteHover();
    });
    
    // 鼠標移動事件處理器
    function handleMouseMove(event: MouseEvent) {
        updateArrows(event.clientX, event.clientY);
    }
    
    // 添加事件監聽器
    arrowSection.addEventListener('mousemove', handleMouseMove);
    arrowSection.addEventListener('mouseleave', handleMouseLeave);
    
    // 視窗大小改變時重新創建箭頭
    window.addEventListener('resize', function() {
        setTimeout(createArrows, 100);
    });
});
</script>

<!-- 移除 VTuber 選項切換功能 - 已優化為靜態展示 -->

<script>
// 亂碼打字機效果
document.addEventListener('DOMContentLoaded', function() {
    const finalQuoteElement = document.querySelector('.final-quote');
    
    if (!finalQuoteElement) return;
    
    // 原始文字內容
    const originalTexts = Array.from(finalQuoteElement.querySelectorAll('p')).map(p => (p.textContent ?? '').trim());
    
    // 初始化時清空所有文字
    finalQuoteElement.querySelectorAll('p').forEach(p => p.textContent = '');
    
    // 亂碼字符集 - 僅使用 morphusai 字符
    const glitchChars = 'morphusai';
    
    let isAnimating = false;
    let hasTriggered = false;
    
    // 生成隨機字符
    function getRandomChar() {
        return glitchChars[Math.floor(Math.random() * glitchChars.length)];
    }
    
    // 打字機動畫 - 從空白開始逐字顯示
    async function typewriterEffect(element: HTMLElement, targetText: string, delay = 50) {
        return new Promise((resolve) => {
            let currentIndex = 0;
            const totalLength = targetText.length;
            
            // 從空白開始
            element.textContent = '';
            
            const typeInterval = setInterval(() => {
                if (currentIndex >= totalLength) {
                    clearInterval(typeInterval);
                    element.textContent = targetText; // 確保最終文字正確
                    resolve(true);
                    return;
                }
                
                // 構建顯示文字
                let displayText = '';
                
                // 已經確定的字符
                for (let i = 0; i < currentIndex; i++) {
                    displayText += targetText[i];
                }
                
                // 當前正在顯示的字符 - 隨機切換幾次後確定
                if (currentIndex < totalLength) {
                    // 70% 機率顯示正確字符，30% 機率顯示亂碼
                    if (Math.random() > 0.3) {
                        displayText += targetText[currentIndex];
                    } else {
                        displayText += getRandomChar();
                    }
                }
                
                element.textContent = displayText;
                currentIndex++;
            }, delay);
        });
    }
    
    // 觸發動畫
    async function triggerGlitchTypewriter() {
        if (isAnimating || hasTriggered) return;
        if (!finalQuoteElement) return;
        
        isAnimating = true;
        hasTriggered = true;
        
        const paragraphs = finalQuoteElement.querySelectorAll('p');
        
        // 為每個段落依序執行打字機效果
        for (let i = 0; i < paragraphs.length; i++) {
            const paragraph = paragraphs[i];
            const targetText = originalTexts[i];
            
            // 第一段落60ms，第二段落50ms - 加快速度
            const speed = i === 0 ? 60 : 50;
            
            await typewriterEffect(paragraph, targetText, speed);
            
            // 段落間停頓縮短為300ms
            if (i < paragraphs.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 300));
            }
        }
        
        isAnimating = false;
    }
    
    // 使用 Intersection Observer 檢測滾動到目標區域
    const observerOptions = {
        threshold: 0.3, // 當30%的區域可見時觸發
        rootMargin: '0px 0px -100px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting && !hasTriggered) {
                // 延遲縮短為100ms，讓效果更即時
                setTimeout(() => {
                    triggerGlitchTypewriter();
                }, 100);
            }
        });
    }, observerOptions);
    
    // 開始觀察最終引言區域
    observer.observe(finalQuoteElement);
    
    // 調試功能 - 可以手動觸發效果
    if (window.location.hash === '#debug') {
        window.triggerGlitchEffect = () => {
            hasTriggered = false;
            isAnimating = false;
            triggerGlitchTypewriter();
        };
        console.log('🐛 調試模式：使用 triggerGlitchEffect() 手動觸發效果');
    }
});
</script>